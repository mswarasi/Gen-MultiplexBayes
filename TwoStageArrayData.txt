
#******************************************************#
# Main function to simulate 2-dim array pooling data.
#
array.2dim.data <- function(p,N,design,Se,Sp){
  n <- design[1]
  L <- floor(N/n^2)
  N0 <- L*n^2
  Rem <- N-N0
  npools <- L*2*n
  Ymul <- rmultinom(N,1,p)
  Ytil1 <- Ymul[2, ] + Ymul[4, ]
  Ytil2 <- Ymul[3, ] + Ymul[4, ]
  id1 <- cumsum( c(0,rep(n^2,L)) )
  Zmat <- Ymat <- NULL
  tmp.id <- rep(-9,N0)
  ntest <- count2 <- 0
  for(l in 1:L){
    Z_id <- matrix((id1[l]+1):id1[l+1],n,n)
    tmp1 <- Ytil1[ (id1[l]+1):id1[l+1] ]
    Ymat1 <- matrix(tmp1,n,n)
    tmp2 <- Ytil2[ (id1[l]+1):id1[l+1] ]
    Ymat2 <- matrix(tmp2,n,n)
    R1 <- rbinom(n,1,ifelse(rowSums(Ymat1)>0,Se[1],1-Sp[1]))
    R2 <- rbinom(n,1,ifelse(rowSums(Ymat2)>0,Se[2],1-Sp[2]))
    Zmat <- rbind(Zmat,cbind(R1,R2,n,Se[1],Se[2],Sp[1],Sp[2],Z_id))
    C1 <- rbinom(n,1,ifelse(colSums(Ymat1)>0,Se[1],1-Sp[1]))
    C2 <- rbinom(n,1,ifelse(colSums(Ymat2)>0,Se[2],1-Sp[2]))
    Zmat <- rbind(Zmat,cbind(C1,C2,n,Se[1],Se[2],Sp[1],Sp[2],t(Z_id)))
    ntest <- ntest + 2*n
    count <- 0
    tpid <- matrix(-9,n,n)
    for(i in 1:n){
      for(j in 1:n){
	    T1 <- 0
	    if(R1[i]==1 & C1[j]==1) T1 <- T1 + 1
	    if(R1[i]==1 & sum(C1)==0) T1 <- T1 + 1
	    if(sum(R1)==0 & C1[j]==1) T1 <- T1 + 1
	    T2 <- 0
	    if(R2[i]==1 & C2[j]==1) T2 <- T2 + 1
	    if(R2[i]==1 & sum(C2)==0) T2 <- T2 + 1
	    if(sum(R2)==0 & C2[j]==1) T2 <- T2 + 1
	    if(T1+T2>=1){
          prob1 <- ifelse( Ymat1[i,j]>0, Se[1], 1-Sp[1] )
          y1 <- rbinom(1,1,prob1)
          prob2 <- ifelse( Ymat2[i,j]>0, Se[2], 1-Sp[2] )
          y2 <- rbinom(1,1,prob2)
		  count <- count + 1
		  Ymat <- rbind(Ymat,c(y1,y2,1,Se[1],Se[2],Sp[1],Sp[2],Z_id[i,j]))
		  count2 <- count2 + 1
		  tpid[i,j] <- npools + count2
	    }
	  }
    }
    tmp.id[ (id1[l]+1):id1[l+1] ] <- tpid
    ntest <- ntest + count
  }
  Zmat <- rbind(Zmat,cbind(Ymat,matrix(-9,nrow(Ymat),n-1)))
  plrem <- Zrem <- NULL
  if(Rem >= 1){
	if(Rem > n){
	  L0 <- floor(Rem/n)
	  N1 <- Rem-L0*n
	  if(N1 > 0){
	    id2 <- cumsum(c(0,rep(n,L0),N1))
	  }else{
	    id2 <- cumsum(c(0,rep(n,L0)))
	  }
	  for(r in 1:(length(id2)-1)){
	     Id1 <- N0+id2[r]+1
		 Id2 <- N0+id2[r+1]
		 yrem1 <- Ytil1[Id1:Id2]
		 yrem2 <- Ytil2[Id1:Id2]
	     res <- array.rem.test(yrem1,yrem2,Se,Sp,Id1,Id2,n,ntest)
	     Zrem <- rbind(Zrem,res$Zrem)
		 plrem <- rbind(plrem,res$plrem)
		 ntest <- ntest + res$trem
	  }
    }else{
	  Id1 <- N0+1
	  Id2 <- N
	  yrem1 <- Ytil1[Id1:Id2]
	  yrem2 <- Ytil2[Id1:Id2]
	  res <- array.rem.test(yrem1,yrem2,Se,Sp,Id1,Id2,n,ntest)
	  Zrem <- rbind(Zrem,res$Zrem)
	  plrem <- rbind(plrem,res$plrem)
	  ntest <- ntest + res$trem
	}
  }
  Zmat <- rbind(Zmat,Zrem)
  rownames(Zmat) <- NULL
  idv.id <- paste( rep("Indv",n), 1:n, sep="" )
  colnames(Zmat) <- c("Z1","Z2","psz","Se1","Se2","Sp1","Sp2",idv.id)
  rownames(Zmat) <- paste("Pool:",1:nrow(Zmat),sep="")
  T <- nrow(Zmat)
  return(list("Data"=Zmat,"T"=T))
}

#******************************************************#
# Support function to test the remaining individuals 
# that cannot be assigned to the initial arrays.
#
array.rem.test <- function(yrem1,yrem2,Se,Sp,Id1,Id2,n,T){
  psz <- length(yrem1)
  if(psz == 1){
	 yr1 <- rbinom(1,1,ifelse(yrem1==1,Se[1],1-Sp[1]))
	 yr2 <- rbinom(1,1,ifelse(yrem2==1,Se[2],1-Sp[2]))
     Zrem <- c(yr1,yr2,1,Se[1],Se[2],Sp[1],Sp[2],Id1,rep(-9,n-1))
	 count3 <- 1
	 plrem <- matrix(c(T+1,rep(-9,2)),ncol=3)
  }
  if(psz > 1){
    Yrem <- NULL
    psz.id <- Id1:Id2
    zrem1 <- rbinom(1,1,ifelse(sum(yrem1)>0,Se[1],1-Sp[1]))
    zrem2 <- rbinom(1,1,ifelse(sum(yrem2)>0,Se[2],1-Sp[2]))
    Zrem <- c(zrem1,zrem2,psz,Se[1],Se[2],Sp[1],Sp[2],psz.id)
    count3 <- 1
    fill1 <- matrix(-9,psz,2)
    if(zrem1+zrem2 > 0){
	  yrem1 <- rbinom(psz,1,ifelse(yrem1>0,Se[1],1-Sp[1]))
	  yrem2 <- rbinom(psz,1,ifelse(yrem2>0,Se[2],1-Sp[2]))
      Yrem <- cbind(yrem1,yrem2,1,Se[1],Se[2],Sp[1],Sp[2],psz.id,matrix(-9,psz,psz-1))
	  count3 <- count3 + psz
	  fill1 <- cbind(T+1+(1:psz),rep(-9,psz))
    }
	plrem <- cbind(rep(T+1,psz),fill1)
	Zrem <- rbind(Zrem,Yrem)
	if(psz < n) Zrem <- cbind(Zrem,matrix(-9,nrow(Zrem),n-psz))
  }
  list("Zrem"=Zrem,"plrem"=plrem,"trem"=count3)
}
