
#******************************************************#
# Function to simulate hierarchical pooling data.
#
hier.alg.data <- function(p,N,design,Se,Sp){
  J <- 2
  c.s <- design
  S <- length(c.s)
  if(S == 1){
    return( mpt.data(p,N,design,Se,Sp) )
  }
  if(S > 1){
    return( multistage.data(p,N,design,Se,Sp) )
  }
}

#******************************************************#
# Simulating multistage heirarchical data.
#
multistage.data <- function(p,N,design,Se,Sp){
  J <- 2
  c.s <- design
  S <- length(c.s)
  Ymul <- rmultinom(N,1,p)
  Ytil1 <- Ymul[2, ] + Ymul[4, ]
  Ytil2 <- Ymul[3, ] + Ymul[4, ]
  M <- floor(N/c.s[1])
  Rem <- N-M*c.s[1]
  psz <- n.div <- list()
  psz[[1]] <- rep(c.s[1],M)
  n.div[[1]] <- rep(1,length(psz[[1]]))
  n.sm <- matrix(-9,length(psz[[1]]),S)
  n.sm[ ,1] <- 1
  if(S > 1){
    for( s in 1:(S-1) ){
	  store <- tmp <- NULL
	  for(i in 1:length(psz[[s]])){
	    temp <- rep( c.s[s+1], floor(psz[[s]][i]/c.s[s+1]) )
  	    store <- c(store,temp)
	    tmp <- c(tmp,length(temp))
	  }
	  psz[[s+1]] <- store
	  n.div[[s+1]] <- tmp
    }
    vec <- rep(1,length(psz[[1]]))
    for(s in 1:(S-1) ){
	  id0 <- cumsum(c(0,vec))
	  for(i in 1:length(psz[[1]])){
        vec[i] <- sum(n.div[[s+1]][(id0[i]+1):id0[i+1]])
      }
      n.sm[ ,s+1] <- vec
    }
  }
  T <- 0
  Zmat <- NULL
  cc <- cumsum(c(0,colSums(n.sm)))
  id <- cumsum(c(0,psz[[1]]))
  pl.res <- matrix(-9,cc[S+1],2)
  for(m in 1:M){
    mid <- (id[m]+1):id[m+1]
    prob1 <- ifelse(sum(Ytil1[mid])>0,Se[1],1-Sp[1])
    prob2 <- ifelse(sum(Ytil2[mid])>0,Se[2],1-Sp[2])
    z1 <- rbinom(1,1,prob1)
    z2 <- rbinom(1,1,prob2)
    pl.res[m,1] <- z1
    pl.res[m,2] <- z2
    Zmat <- rbind(Zmat,c(z1,z2,length(mid),Se[1],Se[2],Sp[1],Sp[2],mid))
    T <- T + 1
  }
  if( S > 1){
    for(s in 2:S){
      Z1 <- pl.res[(cc[s-1]+1):cc[s],1]
      Z2 <- pl.res[(cc[s-1]+1):cc[s],2]
      cid <- cumsum(c(0,psz[[s]]))
      cn <- cumsum(c(0,n.div[[s]]))
      tmp1 <- tmp2 <- NULL
      for(d in 1:length(psz[[s-1]])){
        tmp3 <- tmp4 <- NULL
        if(Z1[d]==0 & Z2[d]==0){
          tmp3 <- tmp4 <- rep(0,length((cn[d]+1):cn[d+1]))
        }
        if(psz[[s-1]][d]==1){
          tmp3 <- Z1[d]
          tmp4 <- Z2[d]
        }
        if(psz[[s-1]][d]>1){
          if(Z1[d]+Z2[d] > 0){
            for(i in (cn[d]+1):cn[d+1]){
              crng <- (cid[i]+1):cid[i+1]
              prob1 <- ifelse(sum(Ytil1[crng])>0,Se[1],1-Sp[1])
              prob2 <- ifelse(sum(Ytil2[crng])>0,Se[2],1-Sp[2])
              ztp1 <- rbinom(1,1,prob1)
              ztp2 <- rbinom(1,1,prob2)
              tmp3 <- c(tmp3,ztp1)
              tmp4 <- c(tmp4,ztp2)
              fill1 <- rep(-9,psz[[1]][1]-length(crng))
              Zmat <- rbind(Zmat,c(ztp1,ztp2,length(crng),Se[1],
                            Se[2],Sp[1],Sp[2],crng,fill1))
              T <- T + 1
            }
          }
        }
        tmp1 <- c(tmp1,tmp3)
        tmp2 <- c(tmp2,tmp4)
      }
      pl.res[(cc[s]+1):cc[s+1],1] <- tmp1
      pl.res[(cc[s]+1):cc[s+1],2] <- tmp2
    }
  }
  if(Rem == 1){
    yr1 <- rbinom(1,1,ifelse(Ytil1[N]==1,Se[1],1-Sp[1]))
    yr2 <- rbinom(1,1,ifelse(Ytil2[N]==1,Se[2],1-Sp[2]))
    Zmat <- rbind(Zmat,c(yr1,yr2,1,Se[1],Se[2],
                 Sp[1],Sp[2],N,rep(-9,c.s[1]-1)))
    T <- T + 1
  }
  if(Rem > 1){
    rid <- (M*c.s[1]+1):N
    ytr1 <- Ytil1[rid]
    ytr2 <- Ytil2[rid]
    zr1 <- rbinom(1,1,ifelse(sum(ytr1)>0,Se[1],1-Sp[1]))
    zr2 <- rbinom(1,1,ifelse(sum(ytr2)>0,Se[2],1-Sp[2]))
    Zmat <- rbind(Zmat,c(zr1,zr2,Rem,Se[1],Se[2],
                  Sp[1],Sp[2],rid,rep(-9,c.s[1]-Rem)))
    T <- T + 1
    if(zr1+zr2 > 0){
      yrm1 <- rbinom(Rem,1,ifelse(ytr1==1,Se[1],1-Sp[1]))
      yrm2 <- rbinom(Rem,1,ifelse(ytr2==1,Se[2],1-Sp[2]))
	  Zmat <- rbind(Zmat,cbind(yrm1,yrm2,1,Se[1],Se[2],Sp[1],
	                Sp[2],rid,matrix(-9,Rem,c.s[1]-1)))
      T <- T + Rem
    }
  }
  ivid <- paste( rep("Indv",psz[[1]][1]),1:psz[[1]][1],sep="" )
  colnames(Zmat) <- c("Z1","Z2","psz","Se1","Se2","Sp1","Sp2",ivid)
  rownames(Zmat) <- paste("Pool:",1:nrow(Zmat),sep="")
  return(list("Data"=Zmat,"T"=T))
}

#******************************************************#
# Simulating master pooled testing data.
#
mpt.data <- function(p,N,design,Se,Sp){
  J <- 2
  psz <- design
  Ymul <- rmultinom(N,1,p)
  Ytil1 <- Ymul[2, ] + Ymul[4, ]
  Ytil2 <- Ymul[3, ] + Ymul[4, ]
  tmp <- floor(N/psz)
  Rem <- N-psz*tmp
  cvec <- rep(psz, tmp)
  if( Rem > 0 ){
    cvec <- c( rep(psz, tmp), Rem )
  }
  M <- length( cvec )
  Zmat <- matrix(-9, M, 7+psz)
  id <- cumsum(c(0,cvec))
  pl.res <- matrix(-9,M,2)
  for(m in 1:M){
    mid <- (id[m]+1):id[m+1]
    prob1 <- ifelse(sum(Ytil1[mid])>0,Se[1],1-Sp[1])
    prob2 <- ifelse(sum(Ytil2[mid])>0,Se[2],1-Sp[2])
    Zmat[m,1] <- rbinom(1,1,prob1)
    Zmat[m,2] <- rbinom(1,1,prob2)
    Zmat[m,3] <- length( mid )
    Zmat[m,4:7] <- c(Se,Sp)
    Zmat[m,8:(7+length(mid))] <- mid
  }

  ivid <- paste( rep("Indv",psz),1:psz,sep="" )
  colnames(Zmat) <- c("Z1","Z2","psz","Se1","Se2","Sp1","Sp2",ivid)
  rownames(Zmat) <- paste("Pool:",1:nrow(Zmat),sep="")
  return(list("Data"=Zmat,"T"=nrow(Zmat)))
}

