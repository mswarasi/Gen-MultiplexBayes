
#******************************************************#
# Support function to implement the EM algorithm. 
# Assay accuracies: known.
#
EmKnownAssayAcr <- function(p0,Z,Yt,N,S,N0,a0,emGit,emburn,emmaxit,emtol){
  dyn.load("gbbstwodisgen.dll")  # Call FORTRAN program
  p.pr <- 1 + a0*p0*N0   # Specify prior
  Ytmat <- poolMembTracker(Z,Yt,N,S)
  N.til <- N-4+sum(p.pr)
  Ycol <- ncol(Ytmat)
  SeSp <- Z[ ,4:7]
  Z <- Z[ ,-(4:7)]
  Zrow <- nrow(Z)
  Zcol <- ncol(Z)
  p1 <- p0
  p0 <- p0 + 2*emtol
  s <- 1
  convergence <- 0
  while(max(abs(p1-p0)) > emtol){  # Start iterating
    p0 <- p1
    V <- matrix(0,nrow=N,ncol=4)
    U <- matrix(runif(N*emGit),nrow=N,ncol=emGit)
    p1 <- EmultGibbs(V,p0,Ytmat,Z,N,SeSp,Ycol,Zrow,Zcol,U,emGit,emburn)$res # E step
	p1 <- p1/N.til + (p.pr-1)/N.til  # Updating by prior
	if(s >= emmaxit){
      convergence <- 1
	  break
    }
    s <- s + 1
    print(c(s,p1))
  }
  dyn.unload("gbbstwodisgen.dll")
  list("prevalence"=p1,"accuracy"=NULL,"convergence"=convergence)
}

#******************************************************#
# Support function to implement the EM algorithm. 
# Assay accuracies: unknown.
#
EmUnknownAssayAcr <- function(p0,delta0,Z,Yt,N,S,N0,a0,b0,acr.info,
                              emGit,emburn,emmaxit,emtol){
  dyn.load("mapacrtwodgen.dll")  # Call FORTRAN program
  p.pr <- 1 + a0*p0*N0  # Specify prior
  se1.pr <- c(1 + b0*acr.info[1,1], 1 + b0*acr.info[1,2])
  se2.pr <- c(1 + b0*acr.info[2,1], 1 + b0*acr.info[2,2])
  sp1.pr <- c(1 + b0*acr.info[1,3], 1 + b0*acr.info[1,4])
  sp2.pr <- c(1 + b0*acr.info[2,3], 1 + b0*acr.info[2,4])
  Ytmat <- poolMembTracker(Z,Yt,N,S)
  N.til <- N-4+sum(p.pr)
  Ycol <- ncol(Ytmat)
  SeSp <- Z[ ,4:7]
  Z <- Z[ ,-(4:7)]
  Zrow <- nrow(Z)
  Zcol <- ncol(Z)
  J <- Zrow
  param0 <- c(p0,delta0)
  param1 <- param0
  param0 <- param0 + 2*emtol
  s <- 1
  convergence <- 0
  while(max(abs(param1-param0)) > emtol){  # Start iterating
    param0 <- param1
	p0 <- param0[1:4]
    SeSp[ ,1] <- param0[5]
    SeSp[ ,2] <- param0[6]
    SeSp[ ,3] <- param0[7]
    SeSp[ ,4] <- param0[8]
    V <- matrix(0,nrow=N,ncol=4)
    U <- matrix(runif(N*emGit),nrow=N,ncol=emGit)
	res <- EmultGibbs2(V,p0,Ytmat,Z,N,SeSp,Ycol,Zrow,Zcol,U,emGit,emburn)  # E step
	p1 <- (p.pr-1)/N.til + res$emul/N.til   # Updating by prior
	eztil <- res$eztil
	J.se1 <- sum(se1.pr)-2 + sum(eztil[ ,1])
	J.se2 <- sum(se2.pr)-2 + sum(eztil[ ,2])
	J.sp1 <- sum(sp1.pr)-2 + J-sum(eztil[ ,1])
	J.sp2 <- sum(sp2.pr)-2 + J-sum(eztil[ ,2])
	se1 <- (se1.pr[1]-1 + sum(Z[ ,1]*eztil[ ,1]) )/J.se1
	se2 <- (se2.pr[1]-1 + sum(Z[ ,2]*eztil[ ,2]) )/J.se2
	sp1 <- (sp1.pr[1]-1 + sum( (1-Z[ ,1])*(1-eztil[ ,1]) ) )/J.sp1
	sp2 <- (sp2.pr[1]-1 + sum( (1-Z[ ,2])*(1-eztil[ ,2]) ) )/J.sp2
    param1 <- c(p1,se1,se2,sp1,sp2)
	if(s >= emmaxit){
      convergence <- 1
	  break
    }
    s <- s + 1
    print(c(s,param1))
  }
  dyn.unload("mapacrtwodgen.dll")
  list("prevalence"=param1[1:4],"accuracy"=param1[5:8],"convergence"=convergence)
}

#******************************************************#
# Support function to approximate expectations using 
# a Gibbs sampler in the E step of the EM algorithm. 
#
EmultGibbs <- function(V,p,Ytmat,Z,N,SeSp,Ycol,Zrow,Zcol,U,emGit,emburn){
  res <- .C("gbbstwodisgen",as.integer(V),p,as.integer(Ytmat),
            as.integer(Z),as.integer(N),SeSp,as.integer(Ycol),
            as.integer(Zrow),as.integer(Zcol),U,as.integer(emGit),
            as.integer(emburn))
  res2 <- colSums( matrix(res[[1]],N,4)/(emGit-emburn) )
  ytil <- res[[3]]
  list("res"=res2,"ytil"=ytil)
}

#******************************************************#
# Support function to approximate expectations using 
# a Gibbs sampler in the E step of the EM algorithm. 
#
EmultGibbs2 <- function(V,p,Ytmat,Z,N,SeSp,Ycol,Zrow,Zcol,U,emGit,emburn){
  Ztil <- matrix(0,Zrow,2)
  res <- .C("mapacrtwodgen",as.integer(V),p,as.integer(Ytmat),
            as.integer(Z),as.integer(Ztil),as.integer(N),SeSp,
			as.integer(Ycol),as.integer(Zrow),as.integer(Zcol),U,
			as.integer(emGit),as.integer(emburn))	
  emul <- colSums( matrix(res[[1]],N,4)/(emGit-emburn) )
  eztil <- matrix(res[[5]],Zrow,2)/(emGit-emburn)
  list("emul"=emul,"eztil"=eztil)
}

#******************************************************#
# Support function to implement the Bayesian methods. 
# Assay accuracies: known.
#
PostKnownAssayAcr <- function(p0,Z,Yt,N,S,N0,a0,postGit){
  library("MCMCpack") # Used to sample from Dirichlet
  dyn.load("ytiltwodbayes.dll")  # Call FORTRAN program
  p.pr <- 1 + a0*p0*N0  # Specify prior
  Ytmat <- poolMembTracker(Z,Yt,N,S)
  Ycol <- ncol(Ytmat)
  SeSp <- Z[ ,4:7]
  Z <- Z[ ,-(4:7)]
  Zrow <- nrow(Z)
  Zcol <- ncol(Z)
  p.save <- sesp.save <- matrix(-9,postGit,4)
  p <- p0
  for(g in 1:postGit){  # Start iterating
    U <- runif(N)
    Zt <- matrix(0,Zrow,2)
    res <- .C("ytiltwodbayes",as.integer(Zt),p,as.integer(Ytmat),
            as.integer(Z),as.integer(N),SeSp,as.integer(Ycol),
            as.integer(Zrow),as.integer(Zcol),U)  # Sample Yt from multinomial
    Ytmat <- matrix(res[[3]],N,Ycol)
    a1 <- p.pr[1] + sum((1-Ytmat[ ,1])*(1-Ytmat[ ,2]))
    a2 <- p.pr[2] + sum(Ytmat[ ,1]*(1-Ytmat[ ,2]))
    a3 <- p.pr[3] + sum((1-Ytmat[ ,1])*Ytmat[ ,2])
    a4 <- p.pr[4] + sum(Ytmat[ ,1]*Ytmat[ ,2])
    p <- rdirichlet(1,c(a1,a2,a3,a4))  # Sample p from Dirichlet
    p.save[g, ] <- p
    print(g)
  }
  dyn.unload("ytiltwodbayes.dll")
  colnames(p.save) <- c("p00","p10","p01","p11")
  list("prevalence"=p.save,"accuracy"=NULL,"convergence"=0)
}

#******************************************************#
# Support function to implement the Bayesian methods. 
# Assay accuracies: unknown.
#
PostUnknownAssayAcr <- function(p0,delta0,Z,Yt,N,S,N0,a0,b0,acr.info,postGit){
  library("MCMCpack") # Used to sample from Dirichlet
  dyn.load("ytiltwodbayes.dll")  # Call FORTRAN program
  p.pr <- 1 + a0*p0*N0  # Specify prior
  se1.pr <- c(1 + b0*acr.info[1,1], 1 + b0*acr.info[1,2])
  se2.pr <- c(1 + b0*acr.info[2,1], 1 + b0*acr.info[2,2])
  sp1.pr <- c(1 + b0*acr.info[1,3], 1 + b0*acr.info[1,4])
  sp2.pr <- c(1 + b0*acr.info[2,3], 1 + b0*acr.info[2,4])
  Ytmat <- poolMembTracker(Z,Yt,N,S)
  Ycol <- ncol(Ytmat)
  SeSp <- Z[ ,4:7]
  Z <- Z[ ,-(4:7)]
  Zrow <- nrow(Z)
  Zcol <- ncol(Z)
  p.save <- sesp.save <- matrix(-9,postGit,4)
  p <- p0
  for(g in 1:postGit){
    U <- runif(N)
    Zt <- matrix(0,Zrow,2)
    res <- .C("ytiltwodbayes",as.integer(Zt),p,as.integer(Ytmat),
            as.integer(Z),as.integer(N),SeSp,as.integer(Ycol),
            as.integer(Zrow),as.integer(Zcol),U)  # Sample Yt from multinomial
    Ytmat <- matrix(res[[3]],N,Ycol)
    Ztil <-  matrix(res[[1]],Zrow,2)
    a1 <- p.pr[1] + sum((1-Ytmat[ ,1])*(1-Ytmat[ ,2]))
    a2 <- p.pr[2] + sum(Ytmat[ ,1]*(1-Ytmat[ ,2]))
    a3 <- p.pr[3] + sum((1-Ytmat[ ,1])*Ytmat[ ,2])
    a4 <- p.pr[4] + sum(Ytmat[ ,1]*Ytmat[ ,2])
    p <- rdirichlet(1,c(a1,a2,a3,a4)) # Sample from Dirichlet
    p.save[g, ] <- p
    a.se1 <- se1.pr[1] + sum(Z[ ,1]*Ztil[ ,1])
    b.se1 <- se1.pr[2] + sum((1-Z[ ,1])*Ztil[ ,1])
    se1 <- rbeta(1,a.se1,b.se1)  # Sample from beta
    a.se2 <- se2.pr[1] + sum(Z[ ,2]*Ztil[ ,2])
    b.se2 <- se2.pr[2] + sum((1-Z[ ,2])*Ztil[ ,2])
    se2 <- rbeta(1,a.se2,b.se2)
    a.sp1 <- sp1.pr[1] + sum((1-Z[ ,1])*(1-Ztil[ ,1]))
    b.sp1 <- sp1.pr[2] + sum(Z[ ,1]*(1-Ztil[ ,1]))
    sp1 <- rbeta(1,a.sp1,b.sp1)
    a.sp2 <- sp2.pr[1] + sum((1-Z[ ,2])*(1-Ztil[ ,2]))
    b.sp2 <- sp2.pr[2] + sum(Z[ ,2]*(1-Ztil[ ,2]))
    sp2 <- rbeta(1,a.sp2,b.sp2)
    Se <- c(se1,se2)
    Sp <- c(sp1,sp2)
    SeSp[ ,1] <- se1
    SeSp[ ,2] <- se2
    SeSp[ ,3] <- sp1
    SeSp[ ,4] <- sp2
    sesp.save[g, ] <- c(Se,Sp)
    print(g)
  }
  dyn.unload("ytiltwodbayes.dll")
  colnames(p.save) <- c("p00","p10","p01","p11")
  colnames(sesp.save) <- c("Se1","Se2","Sp1","Sp2")
  list("prevalence"=p.save,"accuracy"=sesp.save,"convergence"=0)
}

#******************************************************#
# Support function to keep track of the pool members.
#
poolMembTracker <- function(Z,Yt,N,S){
  K <- 2
  ytm <- matrix(-9,N,S)
  tmp <- Z[ ,-(1:(K+1+2*K))]
  vec <- 1:nrow(tmp)
  nz <- ncol(tmp)
  for(d in 1:N){
    tid <- tmp==d
    store <- NULL
    for(i in 1:nz){
      store <- c(store,vec[tid[ ,i]])
    }
    ytm[d,1:length(store)] <- sort(store)
  }
  cbind(Yt,rowSums(ytm>0),ytm)
}

